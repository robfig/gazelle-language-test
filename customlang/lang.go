package gazellelang

import (
	"fmt"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

func NewLanguage() language.Language {
	return &Lang{}
}

type Lang struct {
	config.CommonConfigurer
	resolver
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (l Lang) Kinds() map[string]rule.KindInfo {
	return map[string]rule.KindInfo{
		"corp_protos": {
			MatchAny:   false,
			MatchAttrs: []string{"srcs"},
		},
	}
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (l Lang) Loads() []rule.LoadInfo {
	return nil
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested
// in depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a
// struct to avoid breaking implementations in the future when new
// fields are added.
//
// empty is a list of empty rules that may be deleted after merge.
//
// gen is a list of generated rules that may be updated or added.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (l Lang) GenerateRules(args language.GenerateArgs) (empty, gen []*rule.Rule) {
	fmt.Println("GenerateRules:", args)
	return nil, nil
}

// Fix repairs deprecated usage of language-specific rules in f. This is
// called before the file is indexed. Unless c.ShouldFix is true, fixes
// that delete or rename rules should not be performed.
func (l Lang) Fix(c *config.Config, f *rule.File) {}
